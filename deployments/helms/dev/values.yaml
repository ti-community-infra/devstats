# Some common configurations.
name: devstats
nameOverride: devstats
domainName: 'devstats-dev.tidb.io'
fullnameOverride: devstats
imagePullPolicy: Always
concurrencyPolicy: Forbid

pgSecret: pg-db
oauthSecret: github-oauth
identifierSecret: identifier-secrets
larkSecret: lark-secrets
googleMapSecret: google-map-secrets
awsSecret: aws-secrets
secretType: Opaque

skipTemp: 1
volumeMountName: data
volumeMountPath: '/root'
volumeName: data

# Company configurations.
affiliations: 'github_users.json'
companyAcq: "companies.yaml"

# Bootstrap configurations.
bootstrapCommand: './devel/deploy_all.sh'
bootstrapLDrop: ''
bootstrapNoCreate: ''
bootstrapPodName: devstats-provision-bootstrap
bootstrapRestartPolicy: Never
bootstrapUDrop: ''
requestsBootstrapCPU: '200m'
requestsBootstrapMemory: '256Mi'
limitsBootstrapCPU: '2000m'
limitsBootstrapMemory: '2Gi'
useBootstrapResourcesLimits: 1
waitForPostgres: 15

# Grafana configurations.
grafanaCommand: 'grafana_start.sh'
grafanaImage: 'miniantdev/devstats-grafana:0.7.0-beta.1'
grafanaMaxSurge: 1
grafanaMaxUnavailable: 1
grafanaNReplicas: 1
grafanaPodName: devstats-grafana
grafanaPort: 3000
grafanaRestartPolicy: Always
grafanaSecret: grafana-secret
indexGrafanasFrom: 0
indexGrafanasTo: 100
requestsGrafanasCPU: '300m'
requestsGrafanasMemory: '512Mi'
limitsGrafanasCPU: '2000m'
limitsGrafanasMemory: '8Gi'
useGrafanasResourcesLimits: 1

# Provision configurations.
provisionImage: 'miniantdev/devstats-dev:0.7.0-beta.1'
projectsFile: 'projects.yaml'
provisionCommand: './devel/deploy_all.sh'
provisionPodName: devstats-provision
provisionRestartPolicy: Never
useFlags: ''
indexProvisionsFrom: 0
indexProvisionsTo: 100
requestsProvisionsCPU: '2000m'
requestsProvisionsMemory: '4Gi'
limitsProvisionsCPU: '4000m'
limitsProvisionsMemory: '32Gi'
useProvisionsResourcesLimits: 1
waitForBootstrap: 15

# Cron sync jobs configurations.
syncCommand: devstats
syncImage: 'miniantdev/devstats-minimal-dev:0.7.0-beta.1'
syncPodName: devstats
syncRestartPolicy: Never
indexCronsFrom: 0
indexCronsTo: 100
limitsCronsCPU: '6000m'
limitsCronsMemory: '16Gi'
requestsCronsCPU: '1000m'
requestsCronsMemory: '2Gi'
useCronsResourcesLimits: 1

# Execute Pod configurations.
executeImage: 'miniantdev/devstats-minimal-dev:0.7.0-beta.1'
executePodName: 'devstats-execute'
executeTargetProject: 'tidb'
executeCommand: 'sleep'
executeCommandArgs:
- "60"
# example:
# executeCommand: devstats
# executeResetTSDB: '1'
# executeOnlyMetrics: 'pr_opened_to_merged_company,pr_time_metric_company,pr_first_non_author_activity_company,pr_age_company'
# executeSkipMetrics: ''
# executeTargetDB: 'tikv'
# executeIssueSyncUrl: "select distinct dup_repo_name, number from gha_issues;"
executeRestartPolicy: Never
limitsExecuteCPU: '6000m'
limitsExecuteMemory: '32Gi'
requestsExecuteCPU: '1000m'
requestsExecuteMemory: '1Gi'
useExecuteResourcesLimits: 1

# Affiliations Sync.
affiliationsImage: 'miniantdev/devstats-dev:0.7.0-beta.1'
affiliationsPodName: 'devstats-affiliations'
affiliationsRestartPolicy: Never
affiliationsCommand: './shared/affs.sh'
affiliationsCronHistoryLimit: 2
affiliationsCronFailedHistoryLimit: 1
affiliationsCronStartingDeadlineSeconds: 300
affiliationsGetAffsFiles: '1'
affiliationsSourceUrl: s3://community-devstats-affiliations-dev/github_users.json
affiliationsCompaniesSourceUrl: https://raw.githubusercontent.com/cncf/gitdm/master/src/companies.yaml

useAffiliationsResourcesLimits: 1
indexAffiliationsFrom: 0
indexAffiliationsTo: 300
limitsAffiliationsCPU: '4000m'
limitsAffiliationsMemory: '32Gi'
requestsAffiliationsCPU: '250m'
requestsAffiliationsMemory: '512Mi'

# Identifier
identifierImage: 'miniantdev/devstats-dev:0.7.0-beta.1'
identifierPodName: 'devstats-identifier'
identifierRestartPolicy: Never
identifierCommand: './identifier'
identifierCommandArgs: ''
identifierPGDB: 'allprj'
identifierNAffsCPUs: 8
identifierDebug: ''
identifierCmdDebug: ''
identifierGithubDebug: ''
identifierMaxGhAPIRetry: 3

identifierGitHubUsersJSONSourcePath: https://media.githubusercontent.com/media/cncf/gitdm/master/src/github_users.json
identifierGitHubUsersJSONOutputPath: './github_users.json'
identifierOrganizationConfigFile: './organizations.yaml'
identifierCountryCodesFilePath: './countries.csv'
identifierUploadGitHubUsersJSONToS3: 1
identifierSkipAutoImportProfile: ''
identifierSkipOutputGitHubUserJSON: ''
identifierNodeSelector:

identifierCron: '0 0 */14 * *'
identifierCronHistoryLimit: 2
identifierCronFailedHistoryLimit: 1
identifierCronStartingDeadlineSeconds: 300

useIdentifierResourcesLimits: 1
limitsIdentifierCPU: '4000m'
limitsIdentifierMemory: '32Gi'
requestsIdentifierCPU: '250m'
requestsIdentifierMemory: '512Mi'

# Sync teams cronjob
syncTeamImage: 'miniantdev/devstats-dev:0.7.0-beta.1'
syncTeamPodName: 'devstats-sync-teams'
syncTeamRestartPolicy: Never
syncTeamCommand: './sync_teams'
syncTeamCommandArgs: ''
syncTeamPGDB: 'allprj'
syncTeamNAffsCPUs: 8
syncTeamDebug: ''
syncTeamCmdDebug: ''
syncTeamGithubDebug: ''
syncTeamMaxGhAPIRetry: 3

syncTeamCron: '0 0 * * *'
syncTeamCronHistoryLimit: 2
syncTeamCronFailedHistoryLimit: 1
syncTeamCronStartingDeadlineSeconds: 300

useSyncTeamResourcesLimits: 1
limitsSyncTeamCPU: '4000m'
limitsSyncTeamMemory: '32Gi'
requestsSyncTeamCPU: '250m'
requestsSyncTeamMemory: '512Mi'

# ApiServer configurations.
apiServerCommand: 'apiserver'
apiServerImage: 'miniantdev/devstats-api-dev:0.7.0-beta.1'
apiServerMaxSurge: 1
apiServerMaxUnavailable: 1
apiServerNReplicas: 1
apiServerPodName: devstats-api-server
apiServerPort: 3000
apiServerRestartPolicy: Always

useApiServerResourcesLimits: 1
requestsApiServerCPU: '300m'
requestsApiServerMemory: '512Mi'
limitsApiServerCPU: '2000m'
limitsApiServerMemory: '8Gi'

# Ingresses indexes.
indexIngressesFrom: 0
indexIngressesTo: 100

# Services configurations.
servicePodName: devstats-service
indexServicesFrom: 0
indexServicesTo: 100

# PVs configurations.
pvName: devstats-pvc
indexPVsFrom: 0
indexPVsTo: 100

# Storage configurations.
storageAccessModes: ReadWriteOnce
storageClass: gp2

projects:
  - i: 0
    proj: tidb
    db: tidb
    icon: 'tidb'
    org: 'TiDB'
    repo: 'pingcap/tidb'
    cron: '05 * * * *'
    affCron: '0 14 * * 5'
    affSkipTemp: '1'
    disk: 50Gi
  - i: 1
    proj: tikv
    db: tikv
    icon: 'tikv'
    org: 'TiKV'
    repo: 'tikv/tikv'
    cron: '30 * * * *'
    affCron: '0 16 * * 5'
    disk: 50Gi
  - i: 2
    proj: chaosmesh
    db: chaosmesh
    icon: 'chaosmesh'
    org: 'ChaosMesh'
    repo: 'chaos-mesh/chaos-mesh'
    cron: '50 * * * *'
    affCron: '0 18 * * 5'
    disk: 50Gi
  - i: 3
    proj: all
    db: allprj
    icon: 'all'
    org: 'All'
    repo: '-'
    cron: '40 * * * *'
    affCron: '0 20 * * 5'
    disk: 100Gi
  - i: 4
    proj: ob
    db: ob
    icon: 'ob'
    org: 'OceanBase'
    repo: 'oceanbase/oceanbase'
    cron: '55 * * * *'
    affCron: '0 21 * * 5'
    disk: 20Gi
