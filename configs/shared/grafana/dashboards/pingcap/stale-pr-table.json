{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "",
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 46,
  "iteration": 1625130515845,
  "links": [],
  "panels": [
    {
      "datasource": null,
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 6,
        "x": 0,
        "y": 0
      },
      "id": 6,
      "options": {
        "colorMode": "value",
        "graphMode": "none",
        "justifyMode": "center",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": true
        },
        "text": {
          "valueSize": 72
        },
        "textMode": "auto"
      },
      "pluginVersion": "8.0.3",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with dtto as (\r\n    select case $__timeTo()::timestamp > now()\r\n       when true then now()\r\n       else $__timeTo()::timestamp\r\n    end as dtto\r\n), prs as (\r\n    select\r\n        *\r\n    from\r\n        (\r\n            select\r\n                distinct id,\r\n                pre.dup_repo_name || '#' || pre.number as pr_key,\r\n                dup_repo_id repo_id,\r\n                dup_repo_name repo_name,\r\n                number,\r\n                user_id author_id,\r\n                dup_user_login author_login,\r\n                created_at,\r\n                last_value(updated_at) over pre_ordered_by_update as last_updated_at,\r\n                last_value(merged_at) over pre_ordered_by_update as last_merged_at,\r\n                last_value(closed_at) over pre_ordered_by_update as last_closed_at\r\n            from\r\n                gha_pull_requests pre\r\n            where\r\n                -- Notice: The metric only counts PRs created within one year.\r\n                created_at >= $__timeFrom()\r\n                and created_at < $__timeTo()\r\n                and updated_at < $__timeTo()\r\n                and event_id > 0\r\n            window\r\n                pre_ordered_by_update as (\r\n                    partition by id\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    where\r\n        last_merged_at is null\r\n        and last_closed_at is null\r\n), prs_reponse_events as (\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_issues ie,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            ie.dup_actor_id != pr.author_id\r\n            and ie.dup_repo_name = pr.repo_name\r\n            and ie.number = pr.number\r\n            and ie.updated_at > pr.created_at + '30 seconds'::interval\r\n            and ie.updated_at < $__timeTo()\r\n            -- The event type contains IssueEvent and IssueCommentEvent.\r\n            and ie.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(ie.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            ie.updated_at asc\r\n    )\r\n    union\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_pull_requests pre,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            pre.dup_actor_id != pr.author_id\r\n            and pre.dup_repo_name = pr.repo_name\r\n            and pre.number = pr.number\r\n            and pre.updated_at > pr.created_at + '30 seconds'::interval\r\n            and pre.updated_at < $__timeTo()\r\n            -- The event type contains PullRequestEvent, PullRequestReviewEvent and PullRequestReviewCommentEvent.\r\n            and pre.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(pre.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            pre.updated_at asc\r\n    )\r\n), pr_sig_labels as (\r\n    select\r\n        pr_key,\r\n        sig\r\n    from\r\n    (\r\n        select\r\n            distinct pr_key,\r\n            lower(substring(il.dup_label_name from '(?i)sig/(.*)')) as sig\r\n        from\r\n            gha_issues_labels il,\r\n            prs p\r\n        where\r\n            il.dup_repo_id = p.repo_id\r\n            and il.dup_repo_name = p.repo_name\r\n            and il.dup_issue_number = p.number\r\n    ) sub\r\n    where\r\n        sig is not null\r\n        and sig in (select sig_mentions_labels_name from tsig_mentions_labels)\r\n), prs_with_stale_time as (\r\n    select\r\n        pr.pr_key,\r\n        repo_name,\r\n        number,\r\n        pr.author_login,\r\n        pr.created_at,\r\n        sub.last_response_at,\r\n        r.repo_group,\r\n        coalesce(l.sig, 'non-category') as sig,\r\n        -- So far, PingCAP is the company with the largest contribution to the TiDB community,\r\n        -- but other companies may still become the company with the largest contribution.\r\n        case when aa.company_name = 'PingCAP' then 'top-contrib'\r\n             when lower(pr.author_login) like any(array[\r\n                'dependabot', 'ti-srebot', 'codecov-io', 'web-flow',  'prowbot', 'travis%bot', 'k8s-%', '%-bot',\r\n                '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot',\r\n                '%-testing', 'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%cibot', '%-ci'\r\n             ]) then 'only-bots'\r\n             else 'other-company'\r\n        end as author_type,\r\n        coalesce(\r\n            extract(epoch from d.dtto - last_response_at),\r\n            extract(epoch from d.dtto - pr.created_at)\r\n        ) as stale_for\r\n    from\r\n        dtto d,\r\n        prs pr\r\n    left join\r\n        -- Get the last response time for each PR.\r\n        (\r\n            select\r\n                distinct on(prre.pr_key) pr_key,\r\n                last_value(updated_at) over events_ordered_by_update as last_response_at\r\n            from\r\n                prs_reponse_events prre\r\n            window\r\n                events_ordered_by_update as (\r\n                    partition by pr_key\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    on\r\n        pr.pr_key = sub.pr_key\r\n    -- Notice: A PR belongs to only one repo group.\r\n    left join\r\n        gha_repos r\r\n    on\r\n        pr.repo_id = r.id\r\n        and pr.repo_name = r.name\r\n    -- Notice: The author of the PR may belong to multiple companies at the same time.\r\n    left join\r\n        gha_actors_affiliations aa\r\n    on\r\n        aa.actor_id = pr.author_id\r\n        and aa.dt_from <= pr.created_at\r\n        and aa.dt_to > pr.created_at\r\n    -- Notice: A PR may belong to multiple SIGs.\r\n    left join\r\n        pr_sig_labels l\r\n    on\r\n        pr.pr_key = l.pr_key\r\n)\r\nselect\r\n  count(distinct pr_key)\r\nfrom\r\n  prs_with_stale_time\r\nwhere\r\n   ('${author_type:raw}' = 'all' or author_type = '${author_type:raw}')\r\n   and ('${sig:raw}' = 'all' or sig = '${sig:raw}')\r\n   and ('${repogroup_name}' = 'All' or repo_group = '${repogroup_name}')\r\n   and ('${repo:raw}' = 'all' or repo_name = '${repo:raw}')",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "\"China\""
                ],
                "type": "column"
              }
            ]
          ],
          "table": "scountries",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Stale PR total",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": null,
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": []
        },
        "overrides": []
      },
      "gridPos": {
        "h": 10,
        "w": 5,
        "x": 7,
        "y": 0
      },
      "id": 4,
      "options": {
        "displayLabels": [],
        "legend": {
          "displayMode": "list",
          "placement": "bottom"
        },
        "pieType": "donut",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": true
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.0.3",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with dtto as (\r\n    select case $__timeTo()::timestamp > now()\r\n       when true then now()\r\n       else $__timeTo()::timestamp\r\n    end as dtto\r\n), prs as (\r\n    select\r\n        *\r\n    from\r\n        (\r\n            select\r\n                distinct id,\r\n                pre.dup_repo_name || '#' || pre.number as pr_key,\r\n                dup_repo_id repo_id,\r\n                dup_repo_name repo_name,\r\n                number,\r\n                user_id author_id,\r\n                dup_user_login author_login,\r\n                created_at,\r\n                last_value(updated_at) over pre_ordered_by_update as last_updated_at,\r\n                last_value(merged_at) over pre_ordered_by_update as last_merged_at,\r\n                last_value(closed_at) over pre_ordered_by_update as last_closed_at\r\n            from\r\n                gha_pull_requests pre\r\n            where\r\n                -- Notice: The metric only counts PRs created within one year.\r\n                created_at >= $__timeFrom()\r\n                and created_at < $__timeTo()\r\n                and updated_at < $__timeTo()\r\n                and event_id > 0\r\n            window\r\n                pre_ordered_by_update as (\r\n                    partition by id\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    where\r\n        last_merged_at is null\r\n        and last_closed_at is null\r\n), prs_reponse_events as (\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_issues ie,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            ie.dup_actor_id != pr.author_id\r\n            and ie.dup_repo_name = pr.repo_name\r\n            and ie.number = pr.number\r\n            and ie.updated_at > pr.created_at + '30 seconds'::interval\r\n            and ie.updated_at < $__timeTo()\r\n            -- The event type contains IssueEvent and IssueCommentEvent.\r\n            and ie.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(ie.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            ie.updated_at asc\r\n    )\r\n    union\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_pull_requests pre,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            pre.dup_actor_id != pr.author_id\r\n            and pre.dup_repo_name = pr.repo_name\r\n            and pre.number = pr.number\r\n            and pre.updated_at > pr.created_at + '30 seconds'::interval\r\n            and pre.updated_at < $__timeTo()\r\n            -- The event type contains PullRequestEvent, PullRequestReviewEvent and PullRequestReviewCommentEvent.\r\n            and pre.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(pre.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            pre.updated_at asc\r\n    )\r\n), pr_sig_labels as (\r\n    select\r\n        pr_key,\r\n        sig\r\n    from\r\n    (\r\n        select\r\n            distinct pr_key,\r\n            lower(substring(il.dup_label_name from '(?i)sig/(.*)')) as sig\r\n        from\r\n            gha_issues_labels il,\r\n            prs p\r\n        where\r\n            il.dup_repo_id = p.repo_id\r\n            and il.dup_repo_name = p.repo_name\r\n            and il.dup_issue_number = p.number\r\n    ) sub\r\n    where\r\n        sig is not null\r\n        and sig in (select sig_mentions_labels_name from tsig_mentions_labels)\r\n), prs_with_stale_time as (\r\n    select\r\n        pr.pr_key,\r\n        repo_name,\r\n        number,\r\n        pr.author_login,\r\n        pr.created_at,\r\n        sub.last_response_at,\r\n        r.repo_group,\r\n        coalesce(l.sig, 'non-category') as sig,\r\n        -- So far, PingCAP is the company with the largest contribution to the TiDB community,\r\n        -- but other companies may still become the company with the largest contribution.\r\n        case when aa.company_name = 'PingCAP' then 'top-contrib'\r\n             when lower(pr.author_login) like any(array[\r\n                'dependabot', 'ti-srebot', 'codecov-io', 'web-flow',  'prowbot', 'travis%bot', 'k8s-%', '%-bot',\r\n                '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot',\r\n                '%-testing', 'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%cibot', '%-ci'\r\n             ]) then 'only-bots'\r\n             else 'other-company'\r\n        end as author_type,\r\n        coalesce(\r\n            extract(epoch from d.dtto - last_response_at),\r\n            extract(epoch from d.dtto - pr.created_at)\r\n        ) as stale_for\r\n    from\r\n        dtto d,\r\n        prs pr\r\n    left join\r\n        -- Get the last response time for each PR.\r\n        (\r\n            select\r\n                distinct on(prre.pr_key) pr_key,\r\n                last_value(updated_at) over events_ordered_by_update as last_response_at\r\n            from\r\n                prs_reponse_events prre\r\n            window\r\n                events_ordered_by_update as (\r\n                    partition by pr_key\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    on\r\n        pr.pr_key = sub.pr_key\r\n    -- Notice: A PR belongs to only one repo group.\r\n    left join\r\n        gha_repos r\r\n    on\r\n        pr.repo_id = r.id\r\n        and pr.repo_name = r.name\r\n    -- Notice: The author of the PR may belong to multiple companies at the same time.\r\n    left join\r\n        gha_actors_affiliations aa\r\n    on\r\n        aa.actor_id = pr.author_id\r\n        and aa.dt_from <= pr.created_at\r\n        and aa.dt_to > pr.created_at\r\n    -- Notice: A PR may belong to multiple SIGs.\r\n    left join\r\n        pr_sig_labels l\r\n    on\r\n        pr.pr_key = l.pr_key\r\n)\r\nselect\r\n  case when author_type = 'top-contrib' then 'From the top contributing company'\r\n       when author_type = 'other-company' then 'From not top contributing company'\r\n       when author_type = 'only-bots' then 'Bots'\r\n       else 'Others'\r\n  end as \"Author Type\",\r\n  count(distinct pr_key)\r\nfrom\r\n  prs_with_stale_time\r\nwhere\r\n   ('${author_type:raw}' = 'all' or author_type = '${author_type:raw}')\r\n   and ('${sig:raw}' = 'all' or sig = '${sig:raw}')\r\n   and ('${repogroup_name}' = 'All' or repo_group = '${repogroup_name}')\r\n   and ('${repo:raw}' = 'all' or repo_name = '${repo:raw}')\r\ngroup by\r\n  author_type",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "\"China\""
                ],
                "type": "column"
              }
            ]
          ],
          "table": "scountries",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Count by Author Type",
      "transparent": true,
      "type": "piechart"
    },
    {
      "datasource": null,
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "mappings": [],
          "unit": "short"
        },
        "overrides": [
          {
            "__systemRef": "hideSeriesFrom",
            "matcher": {
              "id": "byNames",
              "options": {
                "mode": "exclude",
                "names": [
                  "count",
                  "pingcap/pd"
                ],
                "prefix": "All except:",
                "readOnly": true
              }
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 5,
      "options": {
        "displayLabels": [],
        "legend": {
          "displayMode": "list",
          "placement": "right",
          "values": [
            "value"
          ]
        },
        "pieType": "donut",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": true
        },
        "tooltip": {
          "mode": "single"
        }
      },
      "pluginVersion": "8.0.3",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with dtto as (\r\n    select case $__timeTo()::timestamp > now()\r\n       when true then now()\r\n       else $__timeTo()::timestamp\r\n    end as dtto\r\n), prs as (\r\n    select\r\n        *\r\n    from\r\n        (\r\n            select\r\n                distinct id,\r\n                pre.dup_repo_name || '#' || pre.number as pr_key,\r\n                dup_repo_id repo_id,\r\n                dup_repo_name repo_name,\r\n                number,\r\n                user_id author_id,\r\n                dup_user_login author_login,\r\n                created_at,\r\n                last_value(updated_at) over pre_ordered_by_update as last_updated_at,\r\n                last_value(merged_at) over pre_ordered_by_update as last_merged_at,\r\n                last_value(closed_at) over pre_ordered_by_update as last_closed_at\r\n            from\r\n                gha_pull_requests pre\r\n            where\r\n                -- Notice: The metric only counts PRs created within one year.\r\n                created_at >= $__timeFrom()\r\n                and created_at < $__timeTo()\r\n                and updated_at < $__timeTo()\r\n                and event_id > 0\r\n            window\r\n                pre_ordered_by_update as (\r\n                    partition by id\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    where\r\n        last_merged_at is null\r\n        and last_closed_at is null\r\n), prs_reponse_events as (\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_issues ie,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            ie.dup_actor_id != pr.author_id\r\n            and ie.dup_repo_name = pr.repo_name\r\n            and ie.number = pr.number\r\n            and ie.updated_at > pr.created_at + '30 seconds'::interval\r\n            and ie.updated_at < $__timeTo()\r\n            -- The event type contains IssueEvent and IssueCommentEvent.\r\n            and ie.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(ie.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            ie.updated_at asc\r\n    )\r\n    union\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_pull_requests pre,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            pre.dup_actor_id != pr.author_id\r\n            and pre.dup_repo_name = pr.repo_name\r\n            and pre.number = pr.number\r\n            and pre.updated_at > pr.created_at + '30 seconds'::interval\r\n            and pre.updated_at < $__timeTo()\r\n            -- The event type contains PullRequestEvent, PullRequestReviewEvent and PullRequestReviewCommentEvent.\r\n            and pre.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(pre.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            pre.updated_at asc\r\n    )\r\n), pr_sig_labels as (\r\n    select\r\n        pr_key,\r\n        sig\r\n    from\r\n    (\r\n        select\r\n            distinct pr_key,\r\n            lower(substring(il.dup_label_name from '(?i)sig/(.*)')) as sig\r\n        from\r\n            gha_issues_labels il,\r\n            prs p\r\n        where\r\n            il.dup_repo_id = p.repo_id\r\n            and il.dup_repo_name = p.repo_name\r\n            and il.dup_issue_number = p.number\r\n    ) sub\r\n    where\r\n        sig is not null\r\n        and sig in (select sig_mentions_labels_name from tsig_mentions_labels)\r\n), prs_with_stale_time as (\r\n    select\r\n        pr.pr_key,\r\n        repo_name,\r\n        number,\r\n        pr.author_login,\r\n        pr.created_at,\r\n        sub.last_response_at,\r\n        r.repo_group,\r\n        coalesce(l.sig, 'non-category') as sig,\r\n        -- So far, PingCAP is the company with the largest contribution to the TiDB community,\r\n        -- but other companies may still become the company with the largest contribution.\r\n        case when aa.company_name = 'PingCAP' then 'top-contrib'\r\n             when lower(pr.author_login) like any(array[\r\n                'dependabot', 'ti-srebot', 'codecov-io', 'web-flow',  'prowbot', 'travis%bot', 'k8s-%', '%-bot',\r\n                '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot',\r\n                '%-testing', 'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%cibot', '%-ci'\r\n             ]) then 'only-bots'\r\n             else 'other-company'\r\n        end as author_type,\r\n        coalesce(\r\n            extract(epoch from d.dtto - last_response_at),\r\n            extract(epoch from d.dtto - pr.created_at)\r\n        ) as stale_for\r\n    from\r\n        dtto d,\r\n        prs pr\r\n    left join\r\n        -- Get the last response time for each PR.\r\n        (\r\n            select\r\n                distinct on(prre.pr_key) pr_key,\r\n                last_value(updated_at) over events_ordered_by_update as last_response_at\r\n            from\r\n                prs_reponse_events prre\r\n            window\r\n                events_ordered_by_update as (\r\n                    partition by pr_key\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    on\r\n        pr.pr_key = sub.pr_key\r\n    -- Notice: A PR belongs to only one repo group.\r\n    left join\r\n        gha_repos r\r\n    on\r\n        pr.repo_id = r.id\r\n        and pr.repo_name = r.name\r\n    -- Notice: The author of the PR may belong to multiple companies at the same time.\r\n    left join\r\n        gha_actors_affiliations aa\r\n    on\r\n        aa.actor_id = pr.author_id\r\n        and aa.dt_from <= pr.created_at\r\n        and aa.dt_to > pr.created_at\r\n    -- Notice: A PR may belong to multiple SIGs.\r\n    left join\r\n        pr_sig_labels l\r\n    on\r\n        pr.pr_key = l.pr_key\r\n)\r\nselect\r\n  repo_name,\r\n  count(distinct pr_key) cnt\r\nfrom\r\n  prs_with_stale_time\r\nwhere\r\n   ('${author_type:raw}' = 'all' or author_type = '${author_type:raw}')\r\n   and ('${sig:raw}' = 'all' or sig = '${sig:raw}')\r\n   and ('${repogroup_name}' = 'All' or repo_group = '${repogroup_name}')\r\n   and ('${repo:raw}' = 'all' or repo_name = '${repo:raw}')\r\ngroup by\r\n  repo_name\r\norder by\r\n  cnt desc\r\nlimit 20",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "\"China\""
                ],
                "type": "column"
              }
            ]
          ],
          "table": "scountries",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Top 20 Repositories",
      "transparent": true,
      "type": "piechart"
    },
    {
      "datasource": null,
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "yellow",
                "value": 604800
              },
              {
                "color": "orange",
                "value": 2592000
              },
              {
                "color": "red",
                "value": 7776000
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 6,
        "x": 0,
        "y": 5
      },
      "id": 7,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "mean"
          ],
          "fields": "",
          "values": false
        },
        "text": {
          "valueSize": 72
        },
        "textMode": "auto"
      },
      "pluginVersion": "8.0.3",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with dtto as (\r\n    select case $__timeTo()::timestamp > now()\r\n       when true then now()\r\n       else $__timeTo()::timestamp\r\n    end as dtto\r\n), prs as (\r\n    select\r\n        *\r\n    from\r\n        (\r\n            select\r\n                distinct id,\r\n                pre.dup_repo_name || '#' || pre.number as pr_key,\r\n                dup_repo_id repo_id,\r\n                dup_repo_name repo_name,\r\n                number,\r\n                user_id author_id,\r\n                dup_user_login author_login,\r\n                created_at,\r\n                last_value(updated_at) over pre_ordered_by_update as last_updated_at,\r\n                last_value(merged_at) over pre_ordered_by_update as last_merged_at,\r\n                last_value(closed_at) over pre_ordered_by_update as last_closed_at\r\n            from\r\n                gha_pull_requests pre\r\n            where\r\n                -- Notice: The metric only counts PRs created within one year.\r\n                created_at >= $__timeFrom()\r\n                and created_at < $__timeTo()\r\n                and updated_at < $__timeTo()\r\n                and event_id > 0\r\n            window\r\n                pre_ordered_by_update as (\r\n                    partition by id\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    where\r\n        last_merged_at is null\r\n        and last_closed_at is null\r\n), prs_reponse_events as (\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_issues ie,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            ie.dup_actor_id != pr.author_id\r\n            and ie.dup_repo_name = pr.repo_name\r\n            and ie.number = pr.number\r\n            and ie.updated_at > pr.created_at + '30 seconds'::interval\r\n            and ie.updated_at < $__timeTo()\r\n            -- The event type contains IssueEvent and IssueCommentEvent.\r\n            and ie.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(ie.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            ie.updated_at asc\r\n    )\r\n    union\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_pull_requests pre,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            pre.dup_actor_id != pr.author_id\r\n            and pre.dup_repo_name = pr.repo_name\r\n            and pre.number = pr.number\r\n            and pre.updated_at > pr.created_at + '30 seconds'::interval\r\n            and pre.updated_at < $__timeTo()\r\n            -- The event type contains PullRequestEvent, PullRequestReviewEvent and PullRequestReviewCommentEvent.\r\n            and pre.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(pre.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            pre.updated_at asc\r\n    )\r\n), pr_sig_labels as (\r\n    select\r\n        pr_key,\r\n        sig\r\n    from\r\n    (\r\n        select\r\n            distinct pr_key,\r\n            lower(substring(il.dup_label_name from '(?i)sig/(.*)')) as sig\r\n        from\r\n            gha_issues_labels il,\r\n            prs p\r\n        where\r\n            il.dup_repo_id = p.repo_id\r\n            and il.dup_repo_name = p.repo_name\r\n            and il.dup_issue_number = p.number\r\n    ) sub\r\n    where\r\n        sig is not null\r\n        and sig in (select sig_mentions_labels_name from tsig_mentions_labels)\r\n), prs_with_stale_time as (\r\n    select\r\n        pr.pr_key,\r\n        repo_name,\r\n        number,\r\n        pr.author_login,\r\n        pr.created_at,\r\n        sub.last_response_at,\r\n        r.repo_group,\r\n        coalesce(l.sig, 'non-category') as sig,\r\n        -- So far, PingCAP is the company with the largest contribution to the TiDB community,\r\n        -- but other companies may still become the company with the largest contribution.\r\n        case when aa.company_name = 'PingCAP' then 'top-contrib'\r\n             when lower(pr.author_login) like any(array[\r\n                'dependabot', 'ti-srebot', 'codecov-io', 'web-flow',  'prowbot', 'travis%bot', 'k8s-%', '%-bot',\r\n                '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot',\r\n                '%-testing', 'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%cibot', '%-ci'\r\n             ]) then 'only-bots'\r\n             else 'other-company'\r\n        end as author_type,\r\n        coalesce(\r\n            extract(epoch from d.dtto - last_response_at),\r\n            extract(epoch from d.dtto - pr.created_at)\r\n        ) as stale_for\r\n    from\r\n        dtto d,\r\n        prs pr\r\n    left join\r\n        -- Get the last response time for each PR.\r\n        (\r\n            select\r\n                distinct on(prre.pr_key) pr_key,\r\n                last_value(updated_at) over events_ordered_by_update as last_response_at\r\n            from\r\n                prs_reponse_events prre\r\n            window\r\n                events_ordered_by_update as (\r\n                    partition by pr_key\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    on\r\n        pr.pr_key = sub.pr_key\r\n    -- Notice: A PR belongs to only one repo group.\r\n    left join\r\n        gha_repos r\r\n    on\r\n        pr.repo_id = r.id\r\n        and pr.repo_name = r.name\r\n    -- Notice: The author of the PR may belong to multiple companies at the same time.\r\n    left join\r\n        gha_actors_affiliations aa\r\n    on\r\n        aa.actor_id = pr.author_id\r\n        and aa.dt_from <= pr.created_at\r\n        and aa.dt_to > pr.created_at\r\n    -- Notice: A PR may belong to multiple SIGs.\r\n    left join\r\n        pr_sig_labels l\r\n    on\r\n        pr.pr_key = l.pr_key\r\n)\r\nselect\r\n   avg(stale_time)\r\nfrom\r\n(\r\n  select\r\n    avg(stale_for) stale_time\r\n  from\r\n    prs_with_stale_time\r\n  where\r\n     ('${author_type:raw}' = 'all' or author_type = '${author_type:raw}')\r\n     and ('${sig:raw}' = 'all' or sig = '${sig:raw}')\r\n     and ('${repogroup_name}' = 'All' or repo_group = '${repogroup_name}')\r\n     and ('${repo:raw}' = 'all' or repo_name = '${repo:raw}')\r\n  group by\r\n    pr_key\r\n) sub",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "\"China\""
                ],
                "type": "column"
              }
            ]
          ],
          "table": "scountries",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Average of Stale Time",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": null,
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Link"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "PR Link",
                    "url": "https://github.com/${__data.fields.Repository}/pull/${__data.fields[\"PR Number\"]}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Stale Time (h)"
            },
            "properties": [
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "yellow",
                      "value": 168
                    },
                    {
                      "color": "orange",
                      "value": 720
                    },
                    {
                      "color": "red",
                      "value": 2160
                    }
                  ]
                }
              },
              {
                "id": "unit",
                "value": "h"
              },
              {
                "id": "custom.displayMode",
                "value": "gradient-gauge"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Author"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "title": "Contributor Profile",
                    "url": "/d/contributor-profile/contributor-profile?orgId=1&var-users=${__data.fields.Author}&var-period=d7&var-repogroup=all"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Author Type"
            },
            "properties": [
              {
                "id": "custom.filterable",
                "value": true
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "only-bots": {
                        "index": 0,
                        "text": "Bots"
                      },
                      "other-company": {
                        "index": 1,
                        "text": "From not top contributing company"
                      },
                      "top-contrib": {
                        "index": 2,
                        "text": "From the top contributing company"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 250
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SIGs"
            },
            "properties": [
              {
                "id": "custom.filterable",
                "value": true
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "non-category": {
                        "color": "transparent",
                        "index": 0,
                        "text": "none"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Author"
            },
            "properties": [
              {
                "id": "custom.filterable",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Repository Group"
            },
            "properties": [
              {
                "id": "custom.filterable",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Repository"
            },
            "properties": [
              {
                "id": "custom.filterable",
                "value": true
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "PR Number"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 129
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 21,
        "w": 24,
        "x": 0,
        "y": 10
      },
      "id": 2,
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Stale Time (h)"
          }
        ]
      },
      "pluginVersion": "8.0.3",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with dtto as (\r\n    select case $__timeTo()::timestamp > now()\r\n       when true then now()\r\n       else $__timeTo()::timestamp\r\n    end as dtto\r\n), prs as (\r\n    select\r\n        *\r\n    from\r\n        (\r\n            select\r\n                distinct id,\r\n                pre.dup_repo_name || '#' || pre.number as pr_key,\r\n                dup_repo_id repo_id,\r\n                dup_repo_name repo_name,\r\n                number,\r\n                user_id author_id,\r\n                dup_user_login author_login,\r\n                created_at,\r\n                last_value(updated_at) over pre_ordered_by_update as last_updated_at,\r\n                last_value(merged_at) over pre_ordered_by_update as last_merged_at,\r\n                last_value(closed_at) over pre_ordered_by_update as last_closed_at\r\n            from\r\n                gha_pull_requests pre\r\n            where\r\n                -- Notice: The metric only counts PRs created within one year.\r\n                created_at >= $__timeFrom()\r\n                and created_at < $__timeTo()\r\n                and updated_at < $__timeTo()\r\n                and event_id > 0\r\n            window\r\n                pre_ordered_by_update as (\r\n                    partition by id\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    where\r\n        last_merged_at is null\r\n        and last_closed_at is null\r\n), prs_reponse_events as (\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_issues ie,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            ie.dup_actor_id != pr.author_id\r\n            and ie.dup_repo_name = pr.repo_name\r\n            and ie.number = pr.number\r\n            and ie.updated_at > pr.created_at + '30 seconds'::interval\r\n            and ie.updated_at < $__timeTo()\r\n            -- The event type contains IssueEvent and IssueCommentEvent.\r\n            and ie.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(ie.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            ie.updated_at asc\r\n    )\r\n    union\r\n    (\r\n        select\r\n            event_id,\r\n            pr_key,\r\n            updated_at\r\n        from\r\n            gha_pull_requests pre,\r\n            prs pr\r\n        where\r\n            -- Ignore the response from the PR author.\r\n            pre.dup_actor_id != pr.author_id\r\n            and pre.dup_repo_name = pr.repo_name\r\n            and pre.number = pr.number\r\n            and pre.updated_at > pr.created_at + '30 seconds'::interval\r\n            and pre.updated_at < $__timeTo()\r\n            -- The event type contains PullRequestEvent, PullRequestReviewEvent and PullRequestReviewCommentEvent.\r\n            and pre.dup_type like '%Event'\r\n            -- Ignore the robot's response.\r\n            and (lower(pre.dup_actor_login) not like all(array[\r\n              'ti-chi-bot', 'ti-community-prow-bot', 'ti-srebot', 'sre-bot', 'tidb-ci-bot', 'CLAassistant', 'web-flow', 'prowbot', 'travis%bot',\r\n              'k8s-%', '%-bot', '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot', '%-testing',\r\n              'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%envoy-filter-example%', '%cibot', '%-ci']))\r\n        order by\r\n            pre.updated_at asc\r\n    )\r\n), pr_sig_labels as (\r\n    select\r\n        pr_key,\r\n        sig\r\n    from\r\n    (\r\n        select\r\n            distinct pr_key,\r\n            lower(substring(il.dup_label_name from '(?i)sig/(.*)')) as sig\r\n        from\r\n            gha_issues_labels il,\r\n            prs p\r\n        where\r\n            il.dup_repo_id = p.repo_id\r\n            and il.dup_repo_name = p.repo_name\r\n            and il.dup_issue_number = p.number\r\n    ) sub\r\n    where\r\n        sig is not null\r\n        and sig in (select sig_mentions_labels_name from tsig_mentions_labels)\r\n), prs_with_stale_time as (\r\n    select\r\n        pr.pr_key,\r\n        repo_name,\r\n        number,\r\n        pr.author_login,\r\n        pr.created_at,\r\n        sub.last_response_at,\r\n        r.repo_group,\r\n        coalesce(l.sig, 'non-category') as sig,\r\n        -- So far, PingCAP is the company with the largest contribution to the TiDB community,\r\n        -- but other companies may still become the company with the largest contribution.\r\n        case when aa.company_name = 'PingCAP' then 'top-contrib'\r\n             when lower(pr.author_login) like any(array[\r\n                'dependabot', 'ti-srebot', 'codecov-io', 'web-flow',  'prowbot', 'travis%bot', 'k8s-%', '%-bot',\r\n                '%-robot', 'bot-%', 'robot-%', '%[bot]%', '%[robot]%', '%-jenkins', 'jenkins-%', '%-ci%bot',\r\n                '%-testing', 'codecov-%', '%clabot%', '%cla-bot%', '%-gerrit', '%-bot-%', '%cibot', '%-ci'\r\n             ]) then 'only-bots'\r\n             else 'other-company'\r\n        end as author_type,\r\n        coalesce(\r\n            extract(epoch from d.dtto - last_response_at),\r\n            extract(epoch from d.dtto - pr.created_at)\r\n        ) as stale_for\r\n    from\r\n        dtto d,\r\n        prs pr\r\n    left join\r\n        -- Get the last response time for each PR.\r\n        (\r\n            select\r\n                distinct on(prre.pr_key) pr_key,\r\n                last_value(updated_at) over events_ordered_by_update as last_response_at\r\n            from\r\n                prs_reponse_events prre\r\n            window\r\n                events_ordered_by_update as (\r\n                    partition by pr_key\r\n                    order by\r\n                        updated_at asc,\r\n                        event_id asc\r\n                    range between current row\r\n                    and unbounded following\r\n                )\r\n        ) sub\r\n    on\r\n        pr.pr_key = sub.pr_key\r\n    -- Notice: A PR belongs to only one repo group.\r\n    left join\r\n        gha_repos r\r\n    on\r\n        pr.repo_id = r.id\r\n        and pr.repo_name = r.name\r\n    -- Notice: The author of the PR may belong to multiple companies at the same time.\r\n    left join\r\n        gha_actors_affiliations aa\r\n    on\r\n        aa.actor_id = pr.author_id\r\n        and aa.dt_from <= pr.created_at\r\n        and aa.dt_to > pr.created_at\r\n    -- Notice: A PR may belong to multiple SIGs.\r\n    left join\r\n        pr_sig_labels l\r\n    on\r\n        pr.pr_key = l.pr_key\r\n)\r\nselect\r\n  repo_group as \"Repository Group\",\r\n  repo_name as \"Repository\",\r\n  number as \"PR Number\",\r\n  pr_key as \"Link\",\r\n  string_agg(sig, ',') as \"SIGs\",\r\n  author_login as \"Author\",\r\n  author_type as \"Author Type\",\r\n  max(created_at) as \"Created At\",\r\n  max(last_response_at) as \"Last Response At\",\r\n  max(stale_for) / 3600.0 as \"Stale Time (h)\"\r\nfrom\r\n  prs_with_stale_time\r\nwhere\r\n   ('${author_type:raw}' = 'all' or author_type = '${author_type:raw}')\r\n   and ('${sig:raw}' = 'all' or sig = '${sig:raw}')\r\n   and ('${repogroup_name}' = 'All' or repo_group = '${repogroup_name}')\r\n   and ('${repo:raw}' = 'all' or repo_name = '${repo:raw}')\r\ngroup by\r\n  repo_group,\r\n  repo_name,\r\n  number,\r\n  pr_key,\r\n  author_login,\r\n  author_type,\r\n  stale_for\r\norder by\r\n  stale_for desc;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "\"China\""
                ],
                "type": "column"
              }
            ]
          ],
          "table": "scountries",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Stale PR Table ",
      "transparent": true,
      "type": "table"
    }
  ],
  "refresh": false,
  "schemaVersion": 30,
  "style": "dark",
  "tags": [
    "PRs",
    "dashboard",
    "active",
    "SIGs",
    "pingcap"
  ],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": "All",
          "value": "All"
        },
        "datasource": null,
        "definition": "select all_repo_group_name from tall_repo_groups order by 1",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": false,
        "label": "Repository group",
        "multi": false,
        "name": "repogroup_name",
        "options": [],
        "query": "select all_repo_group_name from tall_repo_groups order by 1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "all",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "select  sig_mentions_labels_name from tsig_mentions_labels_with_non order by 1",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "SIG",
        "multi": false,
        "name": "sig",
        "options": [],
        "query": "select  sig_mentions_labels_name from tsig_mentions_labels_with_non order by 1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "all",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "datasource": null,
        "definition": "select repo_name from  trepos;",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Repository",
        "multi": false,
        "name": "repo",
        "options": [],
        "query": "select repo_name from  trepos;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "all",
        "current": {
          "selected": false,
          "text": "All",
          "value": "$__all"
        },
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Author Type",
        "multi": false,
        "name": "author_type",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "From the top contributing company",
            "value": "top-contrib"
          },
          {
            "selected": false,
            "text": "From not top contributing company",
            "value": "other-company"
          },
          {
            "selected": false,
            "text": "Bots",
            "value": "only-bots"
          }
        ],
        "query": "From the top contributing company : top-contrib,From not top contributing company : other-company,Bots : only-bots",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-1y",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Stale PR Table",
  "uid": "stale-pr-table",
  "version": 6
}
